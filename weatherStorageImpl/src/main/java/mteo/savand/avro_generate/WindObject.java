/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package mteo.savand.avro_generate;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class WindObject extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9014511920249305651L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WindObject\",\"namespace\":\"mteo.savand.avro_generate\",\"fields\":[{\"name\":\"windSpeedInKnots\",\"type\":\"int\"},{\"name\":\"direction\",\"type\":{\"type\":\"enum\",\"name\":\"WindDirection\",\"symbols\":[\"N\",\"NNE\",\"NE\",\"ENE\",\"E\",\"ESE\",\"SE\",\"SSE\",\"S\",\"SSW\",\"SW\",\"WSW\",\"W\",\"WNW\",\"NW\",\"NNW\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int windSpeedInKnots;
  @Deprecated public mteo.savand.avro_generate.WindDirection direction;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WindObject() {}

  /**
   * All-args constructor.
   * @param windSpeedInKnots The new value for windSpeedInKnots
   * @param direction The new value for direction
   */
  public WindObject(java.lang.Integer windSpeedInKnots, mteo.savand.avro_generate.WindDirection direction) {
    this.windSpeedInKnots = windSpeedInKnots;
    this.direction = direction;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return windSpeedInKnots;
    case 1: return direction;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: windSpeedInKnots = (java.lang.Integer)value$; break;
    case 1: direction = (mteo.savand.avro_generate.WindDirection)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'windSpeedInKnots' field.
   * @return The value of the 'windSpeedInKnots' field.
   */
  public java.lang.Integer getWindSpeedInKnots() {
    return windSpeedInKnots;
  }

  /**
   * Sets the value of the 'windSpeedInKnots' field.
   * @param value the value to set.
   */
  public void setWindSpeedInKnots(java.lang.Integer value) {
    this.windSpeedInKnots = value;
  }

  /**
   * Gets the value of the 'direction' field.
   * @return The value of the 'direction' field.
   */
  public mteo.savand.avro_generate.WindDirection getDirection() {
    return direction;
  }

  /**
   * Sets the value of the 'direction' field.
   * @param value the value to set.
   */
  public void setDirection(mteo.savand.avro_generate.WindDirection value) {
    this.direction = value;
  }

  /**
   * Creates a new WindObject RecordBuilder.
   * @return A new WindObject RecordBuilder
   */
  public static mteo.savand.avro_generate.WindObject.Builder newBuilder() {
    return new mteo.savand.avro_generate.WindObject.Builder();
  }

  /**
   * Creates a new WindObject RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WindObject RecordBuilder
   */
  public static mteo.savand.avro_generate.WindObject.Builder newBuilder(mteo.savand.avro_generate.WindObject.Builder other) {
    return new mteo.savand.avro_generate.WindObject.Builder(other);
  }

  /**
   * Creates a new WindObject RecordBuilder by copying an existing WindObject instance.
   * @param other The existing instance to copy.
   * @return A new WindObject RecordBuilder
   */
  public static mteo.savand.avro_generate.WindObject.Builder newBuilder(mteo.savand.avro_generate.WindObject other) {
    return new mteo.savand.avro_generate.WindObject.Builder(other);
  }

  /**
   * RecordBuilder for WindObject instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WindObject>
    implements org.apache.avro.data.RecordBuilder<WindObject> {

    private int windSpeedInKnots;
    private mteo.savand.avro_generate.WindDirection direction;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(mteo.savand.avro_generate.WindObject.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.windSpeedInKnots)) {
        this.windSpeedInKnots = data().deepCopy(fields()[0].schema(), other.windSpeedInKnots);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.direction)) {
        this.direction = data().deepCopy(fields()[1].schema(), other.direction);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing WindObject instance
     * @param other The existing instance to copy.
     */
    private Builder(mteo.savand.avro_generate.WindObject other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.windSpeedInKnots)) {
        this.windSpeedInKnots = data().deepCopy(fields()[0].schema(), other.windSpeedInKnots);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.direction)) {
        this.direction = data().deepCopy(fields()[1].schema(), other.direction);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'windSpeedInKnots' field.
      * @return The value.
      */
    public java.lang.Integer getWindSpeedInKnots() {
      return windSpeedInKnots;
    }

    /**
      * Sets the value of the 'windSpeedInKnots' field.
      * @param value The value of 'windSpeedInKnots'.
      * @return This builder.
      */
    public mteo.savand.avro_generate.WindObject.Builder setWindSpeedInKnots(int value) {
      validate(fields()[0], value);
      this.windSpeedInKnots = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'windSpeedInKnots' field has been set.
      * @return True if the 'windSpeedInKnots' field has been set, false otherwise.
      */
    public boolean hasWindSpeedInKnots() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'windSpeedInKnots' field.
      * @return This builder.
      */
    public mteo.savand.avro_generate.WindObject.Builder clearWindSpeedInKnots() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'direction' field.
      * @return The value.
      */
    public mteo.savand.avro_generate.WindDirection getDirection() {
      return direction;
    }

    /**
      * Sets the value of the 'direction' field.
      * @param value The value of 'direction'.
      * @return This builder.
      */
    public mteo.savand.avro_generate.WindObject.Builder setDirection(mteo.savand.avro_generate.WindDirection value) {
      validate(fields()[1], value);
      this.direction = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'direction' field has been set.
      * @return True if the 'direction' field has been set, false otherwise.
      */
    public boolean hasDirection() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'direction' field.
      * @return This builder.
      */
    public mteo.savand.avro_generate.WindObject.Builder clearDirection() {
      direction = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public WindObject build() {
      try {
        WindObject record = new WindObject();
        record.windSpeedInKnots = fieldSetFlags()[0] ? this.windSpeedInKnots : (java.lang.Integer) defaultValue(fields()[0]);
        record.direction = fieldSetFlags()[1] ? this.direction : (mteo.savand.avro_generate.WindDirection) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
